package com.justin.spring.web.app;

import java.time.LocalDate;
import java.util.ArrayList;

import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.justin.spring.web.app.util.Employee;
import com.justin.spring.web.app.util.User;
import com.justin.spring.web.app.util.EmployeeRepository;

/**
 * Loads available wage slip links by month.
 * @author Justin Alderson
 *
 */
@Configuration//This an below added to use properties file to load payDay field.
@PropertySource("classpath:application.properties")
@Controller
public class UserPageController {
	
	@Autowired//This will get bean called userRep, which is auto generated by spring..
	private EmployeeRepository userRepo;
	private ArrayList<Employee> workers = new ArrayList<>();
	private static final Logger log = LoggerFactory.getLogger(UserPageController.class);
	private String[] titles = { "January", "February", "March", "April", "May", "June", "July", "August", "September",
			"October", "November", "December" };
	private LocalDate d = LocalDate.now();
	private int month = d.getMonthValue();
	private int day = d.getDayOfMonth();
	
	//Set from application.properties
	@Value("${payday}")
	private int payDay;
	
	// Adds string trimming to check that no spaces are used as login names etc.
	@InitBinder
	public void initBinder(WebDataBinder dataBinder) {
		StringTrimmerEditor stringtrimmerEditor = new StringTrimmerEditor(true);// true trim to null
		dataBinder.registerCustomEditor(String.class, stringtrimmerEditor);
	}

	@RequestMapping("/userPage")
	public String checkUser(@Valid User user, BindingResult bindingResult, Model model) {

		
		if (bindingResult.hasErrors()) {
			return "index";
		} else {
			boolean inDatabase = false;
			Employee employee = null;
			String userName = user.getUser();
			String userPassword = user.getPassword();
			workers = (ArrayList<Employee>) getAllEmployess();
		
			for(Employee em : workers) {
				log.info("Employee: " + em.getName());
				if(userName.equals(em.getName()) & userPassword.equals(em.getPassword())) {
					inDatabase = true;
					employee = em;
					break;
				}
			}
			
			if(inDatabase) {
				if (day < payDay) {
					month = month - 1;
				}
	
				ArrayList<String> untilNow = new ArrayList<String>(12);
				for (int i = 0; i < month; i++) {
					untilNow.add(titles[i]);
				}
	
				ArrayList<String> restMonths = new ArrayList<String>(12);
				for (int i = month; i < titles.length; i++) {
					restMonths.add(titles[i]);
				}
				model.addAttribute("user", user);
				model.addAttribute("employee", employee);
				model.addAttribute("months", untilNow);
				model.addAttribute("restMonths", restMonths);
				return "userPage";
			}else {
				return "invalidUser";
			}
			
		
		}
		
	}
	private @ResponseBody Iterable<Employee> getAllEmployess(){
		return userRepo.findAll();
	}
}
